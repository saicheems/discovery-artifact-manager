"""Contains task definitions for updating Go client artifacts."""
import re
from datetime import date

import os
from os.path import join

from tasks import _git
from tasks._call import CallError, check_call
from tasks._task import Task

_NAME_VERSION_RE = re.compile(r'(\w)\t(.+)/(.+)/.+\.go')

def _parse_diff(diff_ns):
    added = set()
    deleted = set()
    updated = set()
    for status, filename in diff_ns:
        match = _NAME_VERSION_RE.match(filename)
        if not match:
            continue
        name_version = '{}/{}'.format(match.group(2), match.group(3))
        if status == 'A':
            added.add(name_version)
        elif status == 'D':
            deleted.add(name_version)
        elif status == 'M':
            updated.add(name_version)
    return added, deleted, updated

class UpdateClientTask(Task): # pylint: disable=too-few-public-methods
    """Task for updating google-api-go-client."""

    def _run(self, dir_):
        env = os.environ.copy()
        go_dir = join(dir_, 'go')
        os.mkdir(go_dir)
        env['GOPATH'] = go_dir

        check_call('go get -d -t -v google.golang.org/api/...', env=env)
        client_lib_dir = join(go_dir, 'src/google.golang.org/api')
        generator_dir = join(client_lib_dir, 'google-api-go-generator')
        check_call('make all', cwd=generator_dir, env=env)
        check_call('go test ./...', cwd=client_lib_dir, env=env)

        repo = _git.Repository(client_lib_dir)
        repo.add('.')

        added, deleted, updated = _parse_diff(repo.diff_name_status())
        # Bail if no Go files changed. This prevents commits where no actual
        # clients changed, since the generate step also updates the cache of
        # Discovery documents, and the Discovery service does not guarantee
        # that Discovery documents will have a deterministic ordering.
        if not added and not deleted and not updated:
            return ''

        subject = 'all: autogenerated update ({})\n'.format(
            date.today().isoformat())
        try:
            repo.commit(
                subject, self.github_account.name, self.github_account.email)
        except CallError:
            # An exception is raised if there is nothing to commit.
            return

        repo.push()
