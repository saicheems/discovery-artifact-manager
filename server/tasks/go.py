"""Contains task definitions for updating Go client artifacts."""
import re
from datetime import date

import os
from os.path import join

from tasks import _accounts, _check_output, _commit_message, _git, _task
from tasks._check_output import check_output

_NAME_VERSION_RE = re.compile(r'(.+)/(.+)/.+\.go')


class GoogleApiGoClient(object):

    def __init__(self, filepath):
        self._filepath = filepath
        self._github_account = None
        self._env = None
        self._repo = None
        self._ready = False

    def setup(self):
        if self._ready:
            return
        github_account = _accounts.get_github_account()
        env = os.environ.copy()
        go_dir = os.path.join(self._filepath, 'go')
        if not os.path.exists(go_dir):
            os.mkdir(go_dir)
        env['GOPATH'] = go_dir
        check_output(
            ['go', 'get', '-d', '-t', 'google.golang.org/api/...'], env=env)
        self._github_account = github_account
        self._env = env
        self._repo = _git.Repository(join(go_dir, 'src/google.golang.org/api'))
        self._ready = True

    def _statuses(self):
        statuses = {}
        pairs = self._repo.diff_name_status()
        for status, filename in pairs:
            match = _NAME_VERSION_RE.match(filename)
            if not match:
                continue
            name_version = '{}/{}'.format(match.group(1), match.group(2))
            statuses[name_version] = status
        added = {k for k, v in statuses.items() if v == _git.Status.ADDED}
        deleted = {k for k, v in statuses.items() if v == _git.Status.DELETED}
        updated = {k for k, v in statuses.items() if v == _git.Status.UPDATED}
        return added, deleted, updated

    def update(self):
        self.setup()
        generator_dir = join(self._repo.filepath, 'google-api-go-generator')
        check_output(['make', 'all'], cwd=generator_dir, env=self._env)
        check_output(['go', 'test', './...'], cwd=generator_dir, env=self._env)
        self._repo.add(['.'])
        added, deleted, updated = self._statuses()
        if not added and not deleted and not updated:
            return
        today = date.today().isoformat()
        subject = 'all: autogenerated update ({})'.format(today)
        commitmsg = _commit_message.build(
            added, deleted, updated, subject=subject)
        try:
            self._repo.commit(commitmsg,
                              self._github_account.name,
                              self._github_account.email)
        except _check_output.CallError:
            # An exception is raised if there is nothing to commit.
            return
        url = 'https://code.googlesource.com/_direct/google-api-go-client'
        self._repo.push(remote=url)
